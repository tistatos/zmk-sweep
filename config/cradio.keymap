/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
    #define BASE 0
    #define NUMSYMNAV 1
    #define MODS 2
    #define FUN 3
// -----------------

#define HYPR(key) LS(LC(LA(LG(key))))

 &mt {
	tapping-term-ms = <200>;
 };

/ {
  behaviors {
      sticky_ht: sticky_ht {
        compatible = "zmk,behavior-hold-tap";
        label = "STICKY_HOLD_TAP";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        bindings = <&kp>, <&sl>;
      };

      hold_to: hold_to {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TO";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&to>;
      };

      ht_tp: hold_tap_preferred {
        compatible = "zmk,behavior-hold-tap";
        label = "HOLD_TAP_PREFEERED";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
      };
  };

  keymap {
  compatible = "zmk,keymap";

    // Base alpha layer
    default_layer {

  bindings = <
  &kp Q      &kp W      &kp E      &kp R      &kp T            &kp Y      &kp U      &kp I      &kp O      &kp P
  &kp A      &kp S      &kp D      &kp F      &kp G            &kp H      &kp J      &kp K      &kp L      &kp SEMI
  &kp Z      &kp X      &kp C      &kp V      &kp B            &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH
  &sticky_ht LCTRL MODS              &mt LGUI ENTER            &ht_tp LSHIFT SPACE          &hold_to RALT NUMSYMNAV
  >;
  };

		// Numbers, symbols and navigation
		sym_layer {

	bindings = <
	&kp N1     &kp N2       &kp N3       &kp N4      &kp N5          &kp N6      &kp N7      &kp N8   &kp N9      &kp N0
	&kp GRAVE  &kp SQT      &kp MINUS    &kp EQUAL   &kp BSPC        &kp LEFT    &kp DOWN    &kp UP   &kp RIGHT   &kp BSLH
	&kp TAB    &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE  &kp DEL         &kp LBKT    &kp RBKT    &trans   &trans      &trans
  &hold_to LCTRL BASE                               &trans         &trans                            &hold_to RALT FUN
	>;
	};

		// Main modifiers and media controls
		mod_layer {

	bindings = <
	&kp ESC       &none         &none       &sk LG(LCTRL)  &sk LG(LSHIFT)       &kp HYPR(Y)  &kp HYPR(U)  &kp HYPR(I)  &kp HYPR(O)  &kp HYPR(P)
	&sk LSHIFT    &sk LCTRL     &sk LGUI    &sk LALT       &sk RALT             &none        &none        &none        &none        &none
	&kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &none                &kp C_PREV   &kp C_PP     &kp C_NEXT   &none        &none
	&to BASE                                               &trans               &trans                                       &to NUMSYMNAV
	>;
	};

		// Function keys with modifiers and blutetooth
		fnc_layer {
	bindings = <
	&kp F1     &kp F2       &kp F3          &kp F4          &kp F5         &kp F6  &kp F7  &kp F8          &kp F9  &kp F10
	&sk LSHIFT &sk LCTRL    &sk LGUI        &sk LALT        &sk RALT       &none   &none   &kp PRINTSCREEN &kp F11 &kp F12
	&none      &none        &none           &none           &none          &bt BT_SEL 0 &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3 &bt BT_CLR
	&to BASE                     &kp LCTRL                                    &kp LALT                &none
	>;
	};
 };
};
